<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pansansuiBlog</title>
    <url>/2023/03/09/pansansuiBlog/</url>
    <content><![CDATA[<h1 id="本博客的框架和解构（Hexo框架，Ocean主题）"><a href="#本博客的框架和解构（Hexo框架，Ocean主题）" class="headerlink" title="本博客的框架和解构（Hexo框架，Ocean主题）"></a>本博客的框架和解构（Hexo框架，Ocean主题）</h1><p>完全自己一个人摸索的，理解不一定正确</p>
<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><blockquote>
<p>node_modules—————————-npm下载的各种依赖插件，hexo服务器，各类hexo的插件<br>public———————————-hexo给你的工程编译后的工程结构，实际上你开发的项目部署时的结构<br>scaffolds—————————-模板，hexo new 可以按照里面的模板来生产Markdown</p>
<blockquote>
<p>draft —————————-blog的草稿文件模板he<br>post—————————-发布的blog模板<br>page—————————-页面模板!!!区分blog和页面，</p>
</blockquote>
<p>source—————————-对应scaffolds模板创建出来的文件，写博文主要在这个文件下面编辑</p>
<blockquote>
<p>_draft<br>_posts<br>about<br>gallery<br>link<br>video</p>
</blockquote>
<p>themes—————————-主题</p>
<blockquote>
<p>landscape———–landscape据了解是设计hexo主题的一个框架没用ocean主题应该把landscape文件名改成ocean，再根据结构开发<br>ocean</p>
<blockquote>
<p>languages<br>layout</p>
<blockquote>
<p>layout.ejs—————————- 每个页面的入口文件<br>_config.yml —————————-ocean主题的配置文件</p>
</blockquote>
</blockquote>
</blockquote>
<p>_config.landscape.yml<br>_config.yml hexo的配置文件</p>
</blockquote>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>ocean</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2023/03/09/mysql/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexoOceanSkill</title>
    <url>/2023/03/08/hexoOceanSkill/</url>
    <content><![CDATA[<p>ocean 主题的feathericon的代号映射位置在themes\ocean\source\css_feathericon.styl下<br>ocean 主题的菜单更改图标的文件在themes\ocean\source\css_partial\navbar.styl中</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h1><p>制作谷歌播放器动画的时候，声明在themes\ocean\source\css_partial\layout.styl 的属性绑定不了上iframe，最后在themes\ocean\source\js\ocean.js中用jQuery绑定的，原因初步<del>推测是要等iframe渲染好才可以绑定style属性。</del><br>—发现部署在github上的和自己hexo server运行的不一样，且导航栏的颜色属性也莫名奇妙的被覆盖了，现在怀疑是hexo g的时候哪里覆盖了layout.styl的属性或者根本没用上。<br>—真搞不懂了，在layout.styl删除了@media (min-width: 768px)下面的sidebar所有属性后，github上的导航栏恢复正常了，注释掉ocean.js的播放器动画，声明在layout.styl上也行了，问题是sidebar的颜色前后声明都是一样的为啥后面不行。<br>–受不了啦，明明写的right为-10rem喵的hexo g编译老是给爷改成10rem，最后2023手动改了public里的ocean.js和styl.styl，to do ：实现手机端的播放器透明，不透明转换，顶端粘粘。</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="每天一道算法题"><a href="#每天一道算法题" class="headerlink" title="每天一道算法题"></a>每天一道算法题</h1><p>date: 2023-3-10 8:00</p>
<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><a href="https://leetcode.cn/problems/string-to-integer-atoi/">字符串转换整数</a>,请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">        /*</span><br><span class="line">    * @Description:</span><br><span class="line">    * @ParamType:null</span><br><span class="line">    * @Param: null</span><br><span class="line">    * @<span class="built_in">return</span>: null </span><br><span class="line">    * @Author: panpan</span><br><span class="line">    * @Date:10/3/2023</span><br><span class="line">    */</span><br><span class="line">    public int myAtoi(String s) &#123;</span><br><span class="line">        autoMachine autoMachine = new autoMachine();</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            autoMachine.changeState(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        int res = 0;</span><br><span class="line">        <span class="keyword">if</span>(autoMachine.state==2||autoMachine.state==3)&#123;</span><br><span class="line">            <span class="keyword">if</span>(autoMachine.sign)&#123;</span><br><span class="line">                res=(int) autoMachine.val;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res=-(int) autoMachine.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">    * @Description:</span><br><span class="line">    * @ParamType:null</span><br><span class="line">    * @Param: null</span><br><span class="line">    * @<span class="built_in">return</span>: null </span><br><span class="line">    * @Author: panpan</span><br><span class="line">    * @Date:10/3/2023</span><br><span class="line">    */</span><br><span class="line">    </span><br><span class="line">   class autoMachine&#123;</span><br><span class="line">        private Integer state=0;</span><br><span class="line">        private HashMap&lt;Integer,Integer[]&gt; stateChangeTable=new HashMap&lt;Integer, Integer[]&gt;()&#123;</span><br><span class="line">            //    state       &#123;<span class="string">&#x27;&#x27;</span>,+/-,num,other&#125;</span><br><span class="line">            &#123; put(0, new Integer[]&#123;0,1,2,3&#125;);</span><br><span class="line">              put(1,new Integer[]&#123;3,3,2,3&#125;);</span><br><span class="line">              put(2, new Integer[]&#123;3,3,2,3&#125;);</span><br><span class="line">              put(3,new Integer[]&#123;3,3,3,3&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 正负</span><br><span class="line">       private boolean sign=<span class="literal">true</span>;</span><br><span class="line">       // 值</span><br><span class="line">       private long val=0l;</span><br><span class="line">       private void changeState(char c)&#123;</span><br><span class="line">            // 改变状态</span><br><span class="line">            state = stateChangeTable.get(state)[nextState(c)];</span><br><span class="line">            // 判断当前状态是数字</span><br><span class="line">            <span class="keyword">if</span>(state==2)&#123;</span><br><span class="line">                // 减去ascii码的0起始位</span><br><span class="line">                val=val*10+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                // 最大的绝对值不一样,踩坑min_value的绝对值还是min—value负数，因为比max大，二进制就是最小值。</span><br><span class="line">                val=sign?Math.min(Integer.MAX_VALUE, val):Math.min(-(long) Integer.MIN_VALUE, val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state==1)&#123;</span><br><span class="line">                sign=<span class="string">&#x27;+&#x27;</span>==c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        private int nextState(char c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27; &#x27;</span>==c)&#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;+&#x27;</span>==c||<span class="string">&#x27;-&#x27;</span>==c)&#123;</span><br><span class="line">                  <span class="built_in">return</span> 1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c))&#123;</span><br><span class="line">                <span class="built_in">return</span> 2;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">return</span> 3;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>git and ssh</title>
    <url>/2023/03/07/gitssh/</url>
    <content><![CDATA[<h1 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span> </span><br></pre></td></tr></table></figure>
<h1 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email` <span class="string">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="git生成公钥"><a href="#git生成公钥" class="headerlink" title="git生成公钥"></a>git生成公钥</h1><blockquote>
<p>  会生成在当前目录，git bash到用户的.ssh文件夹，可命名文件名，可设置打开文件的密码.默认电脑一个公钥私钥，一个公钥只能被使用一次，建议公钥绑定github账号而非github具体的仓库，部署多个<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys">点击这里</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="查看git的用户名和邮箱"><a href="#查看git的用户名和邮箱" class="headerlink" title="查看git的用户名和邮箱"></a>查看git的用户名和邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<h1 id="查看git的公钥"><a href="#查看git的公钥" class="headerlink" title="查看git的公钥"></a>查看git的公钥</h1><p>存储就在用户目录下的.ssh文件夹里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>1.先在账户上创建repository。保证用户有权限，SSH或者http登录，推荐SSH绑定账户信息，http登录仓库，方便权限管理</p>
<p>2.a 没有.git文件的，先在本地工程一级目录下初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# HexoBogForPanpan&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:pansansui/HexoBogForPanpan.git //这是在你电脑上生成了一个origin的远程仓库，连接地址是后面的，常用命令有git remote //列出远程仓库名</span><br><span class="line">git remote show [远程仓库名] //该仓库链接的详细信息</span><br><span class="line">git remote rename old-name new-name //换名</span><br><span class="line">git push -u origin main //发布到远程仓库</span><br></pre></td></tr></table></figure>
<p>2.b 有.git文件的:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:pansansui/HexoBogForPanpan.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h1 id="git-常用命令集"><a href="#git-常用命令集" class="headerlink" title="git 常用命令集"></a>git 常用命令集</h1><p>git 常用操作练习<a href="https://learngitbranching.js.org/?locale=zh_CN">点击这里</a>，该网站常用命令show solution，reset，levels<br>删除当前项目的git关联<br><code>find . -name &quot;.git&quot; | xargs rm -rf</code><br>初始化<br><code>git init</code><br>查看追踪文件状态<br><code>git status</code><br>取消文件追踪<br><code>git reset HEAD [文件路径]</code><br>添加文件追踪<br><code>git add [文件]</code><br>提交<br> <code>git commit -m [本次更新的消息提示]</code><br>创建切换分支<br><code>git branch bugFix;git checkout bugFix</code><br>或者<br><code>git checkout -b bugFix</code><br>合并当前分支与目标<br><code>git merge [目标分支]</code><br><img src=/images/merge.png width="30%" alt="未找到merge流程图片" ><br><code>git rebase [目标分支]</code></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello pansansui</title>
    <url>/2021/06/22/hello-world/</url>
    <content><![CDATA[<p>Welcome ! This is my first blog for review my Java knowledge . Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
