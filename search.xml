<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>html_CSS</title>
    <url>/2023/03/13/html-CSS/</url>
    <content><![CDATA[<p>div内文字：<br>a. 字母时，空格区别一个单词，换行时不会切割单词。<br>b. 汉字时，自动换行。<br>把div当作蒙板时，可以遮住iframe，遮不住select。可以使用iframe可以遮盖select，一般使用iframe和div结合的办法遮盖select（div所以要比iframe的z索引高）并创建内容，其实iframe会自动隐藏select，也可以自己只使用div和js隐藏select。如本博客主页所遇到的,下面的div用来在移动端时，遮住音乐播放器，和主页select视频，放弃hover事件模拟播放器iframe的点击事件。<br></p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;musicMobileCover&quot;</span>&gt;</span><br><span class="line">      &lt;iframe hidden&gt;</span><br><span class="line">      &lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>lanIP</title>
    <url>/2023/03/13/lanIP/</url>
    <content><![CDATA[<h1 id="路由寻址的摸索"><a href="#路由寻址的摸索" class="headerlink" title="路由寻址的摸索"></a>路由寻址的摸索</h1><p>个人理解，ip对应网卡，实际是多个虚拟网卡。mac对应主机，实际是对应端口号。<br>自己下午测了一下路由的各种情况，画了个表，大概知道路由器会有路由表，寻址时先广播找MAC。<br></p>
<span id="more"></span>
<img src=/images/post_lanip01.png width="100%" alt="测试图片" >
4.在同一个wifi下（应该是同频率下），192.168.8.5（包装自己的Mac）在广播寻址192.168.8.2，在相同频段内连接的所有的网卡均能收到8.5寻找8.2信息，只要自身是8.2就可以回复并发送自己的Mac，不是8.2的不回复（存在多个冲突，推测先到先得），8.5在根据目标8.2的mac发送报文。（本次的路由器ip为192.169.0.1/24，与子网不同，推测路由器并不会在路由表中维护8.5的ipmac关系或者说路由器根本收不到广播？如果路由器ip192.168.8.1/24等包含8.5ip，则会维护）。


]]></content>
      <tags>
        <tag>ip</tag>
        <tag>bug</tag>
        <tag>局域网</tag>
        <tag>DHCP</tag>
        <tag>路由器</tag>
        <tag>路由表</tag>
      </tags>
  </entry>
  <entry>
    <title>pansansuiBlog</title>
    <url>/2023/03/09/pansansuiBlog/</url>
    <content><![CDATA[<h1 id="本博客的框架和结构（Hexo框架，Ocean主题）"><a href="#本博客的框架和结构（Hexo框架，Ocean主题）" class="headerlink" title="本博客的框架和结构（Hexo框架，Ocean主题）"></a>本博客的框架和结构（Hexo框架，Ocean主题）</h1><p>完全自己一个人摸索的，理解不一定正确<br></p>
<span id="more"></span>
<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><blockquote>
<p>node_modules—————————-npm下载的各种依赖插件，hexo服务器，各类hexo的插件<br>public———————————-hexo给你的工程编译后的工程结构，实际上你开发的项目部署时的结构<br>scaffolds—————————-模板，hexo new 可以按照里面的模板来生产Markdown</p>
<blockquote>
<p>draft —————————-blog的草稿文件模板he<br>post—————————-发布的blog模板<br>page—————————-页面模板!!!区分blog和页面，</p>
</blockquote>
<p>source—————————-对应scaffolds模板创建出来的文件，写博文主要在这个文件下面编辑</p>
<blockquote>
<p>_draft<br>_posts<br>about<br>gallery<br>link<br>video</p>
</blockquote>
<p>themes—————————-主题</p>
<blockquote>
<p>landscape———–landscape据了解是设计hexo主题的一个框架没用ocean主题应该把landscape文件名改成ocean，再根据结构开发<br>ocean</p>
<blockquote>
<p>languages<br>layout</p>
<blockquote>
<p>layout.ejs—————————- 每个页面的入口文件<br>_config.yml —————————-ocean主题的配置文件</p>
</blockquote>
</blockquote>
</blockquote>
<p>_config.landscape.yml<br>_config.yml hexo的配置文件</p>
</blockquote>
<h2 id="Done-and-todoList"><a href="#Done-and-todoList" class="headerlink" title="Done and todoList"></a>Done and todoList</h2><p><del>制作博客各种图标</del><br><del>引入网易云音乐</del><br><del>网易云音乐控件动画</del><br><del>网易云音乐控件动画抽搐bug</del><br><del>网易云音乐移动和pc端的适配</del><br>网易云音乐全站唯一对象（感觉不行，网址不能跳，只能把其他所有界面放到iframe里，iframe里没有服务器很难实现其他功能，把js弄到游览器上跑？）<br><del>引入b站视频</del><br><del>实现b站同款视频卡片页</del><br>解决b站防盗链（无语了开放api得到的数据加防盗链是咋想的）<br>判断游览器是否支持默认播放，否则关闭play()<br><del>实现read more</del><br>实现相册（hexo-light-gallery）<br>实现下载功能<br><del>欠3道算法题</del><br>欠1道算法题<br>实现连接里面的分享卡片，写个hexo插件<br>实现图片的放大查看fancybox<br>完成博文lanIP<br>完成Hexo-SEO-AutoPush，方便搜索引擎爬取<br>实现夜间模式</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>ocean</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2023/03/09/mysql/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexoOceanSkill</title>
    <url>/2023/03/08/hexoOceanSkill/</url>
    <content><![CDATA[<p>ocean 主题的feathericon的代号映射位置在themes\ocean\source\css_feathericon.styl下<br>ocean 主题的菜单更改图标的文件在themes\ocean\source\css_partial\navbar.styl中</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题:"></a>遇到的问题:</h1><p>制作谷歌播放器动画的时候，声明在themes\ocean\source\css_partial\layout.styl 的属性绑定不了上iframe，最后在themes\ocean\source\js\ocean.js中用jQuery绑定的，原因初步<del>推测是要等iframe渲染好才可以绑定style属性。</del><br>—发现部署在github上的和自己hexo server运行的不一样，且导航栏的颜色属性也莫名奇妙的被覆盖了，现在怀疑是hexo g的时候哪里覆盖了layout.styl的属性或者根本没用上。<br>—真搞不懂了，在layout.styl删除了@media (min-width: 768px)下面的sidebar所有属性后，github上的导航栏恢复正常了，注释掉ocean.js的播放器动画，声明在layout.styl上也行了，问题是sidebar的颜色前后声明都是一样的为啥后面不行。<br></p>
<span id="more"></span>
<p>–受不了啦，明明写的right为-10rem喵的hexo g编译老是给爷改成10rem，最后2023手动改了public里的ocean.js和styl.styl，to do ：实现手机端的播放器透明，不透明转换，顶端粘粘。<br>–搞明白了，没有hexo clean之前残留的文件冲突了，无语了还以为会和git一样版本控制就没有每次clean，心塞。</p>
]]></content>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2023/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="每天一道算法题"><a href="#每天一道算法题" class="headerlink" title="每天一道算法题"></a>每天一道算法题</h1><p>date: 2023-3-10 8:00</p>
<h2 id="题目一：字符串转换整数"><a href="#题目一：字符串转换整数" class="headerlink" title="题目一：字符串转换整数"></a>题目一：<a href="https://leetcode.cn/problems/string-to-integer-atoi/">字符串转换整数</a></h2><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）<br></p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">        /*</span><br><span class="line">    * @Description:有限状态自动机</span><br><span class="line">    * @ParamType:null</span><br><span class="line">    * @Param: null</span><br><span class="line">    * @<span class="built_in">return</span>: null </span><br><span class="line">    * @Author: panpan</span><br><span class="line">    * @Date:10/3/2023</span><br><span class="line">    */</span><br><span class="line">    public int myAtoi(String s) &#123;</span><br><span class="line">        autoMachine autoMachine = new autoMachine();</span><br><span class="line">        <span class="keyword">for</span>(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">            autoMachine.changeState(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        int res = 0;</span><br><span class="line">        <span class="keyword">if</span>(autoMachine.state==2||autoMachine.state==3)&#123;</span><br><span class="line">            <span class="keyword">if</span>(autoMachine.sign)&#123;</span><br><span class="line">                res=(int) autoMachine.val;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res=-(int) autoMachine.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">    * @Description:</span><br><span class="line">    * @ParamType:null</span><br><span class="line">    * @Param: null</span><br><span class="line">    * @<span class="built_in">return</span>: null </span><br><span class="line">    * @Author: panpan</span><br><span class="line">    * @Date:10/3/2023</span><br><span class="line">    */</span><br><span class="line">    </span><br><span class="line">   class autoMachine&#123;</span><br><span class="line">        private Integer state=0;</span><br><span class="line">        private HashMap&lt;Integer,Integer[]&gt; stateChangeTable=new HashMap&lt;Integer, Integer[]&gt;()&#123;</span><br><span class="line">            //    state       &#123;<span class="string">&#x27;&#x27;</span>,+/-,num,other&#125;</span><br><span class="line">            &#123; put(0, new Integer[]&#123;0,1,2,3&#125;);</span><br><span class="line">              put(1,new Integer[]&#123;3,3,2,3&#125;);</span><br><span class="line">              put(2, new Integer[]&#123;3,3,2,3&#125;);</span><br><span class="line">              put(3,new Integer[]&#123;3,3,3,3&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 正负</span><br><span class="line">       private boolean sign=<span class="literal">true</span>;</span><br><span class="line">       // 值</span><br><span class="line">       private long val=0l;</span><br><span class="line">       private void changeState(char c)&#123;</span><br><span class="line">            // 改变状态</span><br><span class="line">            state = stateChangeTable.get(state)[nextState(c)];</span><br><span class="line">            // 判断当前状态是数字</span><br><span class="line">            <span class="keyword">if</span>(state==2)&#123;</span><br><span class="line">                // 减去ascii码的0起始位</span><br><span class="line">                val=val*10+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                // 最大的绝对值不一样,踩坑min_value的绝对值还是min—value负数，因为比max大，二进制就是最小值。</span><br><span class="line">                val=sign?Math.min(Integer.MAX_VALUE, val):Math.min(-(long) Integer.MIN_VALUE, val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state==1)&#123;</span><br><span class="line">                sign=<span class="string">&#x27;+&#x27;</span>==c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        private int nextState(char c)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27; &#x27;</span>==c)&#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;+&#x27;</span>==c||<span class="string">&#x27;-&#x27;</span>==c)&#123;</span><br><span class="line">                  <span class="built_in">return</span> 1;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Character.isDigit(c))&#123;</span><br><span class="line">                <span class="built_in">return</span> 2;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">return</span> 3;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目二：比较版本号"><a href="#题目二：比较版本号" class="headerlink" title="题目二：比较版本号"></a>题目二：<a href="https://leetcode.cn/problems/compare-version-numbers/">比较版本号</a></h2><p>给你两个版本号 version1 和 version2 ，请你比较它们。<br>版本号由一个或多个修订号组成，各修订号由一个 ‘.’ 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    * @Description:笨蛋双指针和递归..</span><br><span class="line">    * @ParamType:string</span><br><span class="line">    * @Param: null</span><br><span class="line">    * @<span class="built_in">return</span>: int</span><br><span class="line">    * @Author: panpan</span><br><span class="line">    * @Date:14/3/2023</span><br><span class="line">    */</span><br><span class="line">public  static int compareVersion(String rev1, String rev2) &#123;</span><br><span class="line">        int start1=-1,start2=-1,end1=-1,end2=-1;</span><br><span class="line">        // 找rev1 的起始位置</span><br><span class="line">        <span class="keyword">for</span> (int j = 0; j &lt; rev1.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(rev1.charAt(j)&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;rev1.charAt(j)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                start1=j;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rev1.charAt(j)&lt;<span class="string">&#x27;0&#x27;</span>||rev1.charAt(j)&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rev1.charAt(j)!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="built_in">return</span> 0;&#125;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //rev结束位置</span><br><span class="line">        <span class="keyword">for</span> (int j = start1==-1?0:start1; j &lt; rev1.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(rev1.charAt(j)==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                end1=j;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rev1.charAt(j)&lt;<span class="string">&#x27;0&#x27;</span>||rev1.charAt(j)&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 找rev2 的起始位置</span><br><span class="line">        <span class="keyword">for</span> (int j = 0; j &lt; rev2.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(rev2.charAt(j)&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;rev2.charAt(j)&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                start2=j;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rev2.charAt(j)&lt;<span class="string">&#x27;0&#x27;</span>||rev2.charAt(j)&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(rev2.charAt(j)!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="built_in">return</span> 0;&#125;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //rev2结束位置</span><br><span class="line">        <span class="keyword">for</span> (int j = start2==-1?0:start2; j &lt; rev2.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(rev2.charAt(j)==<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                end2=j;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rev2.charAt(j)&lt;<span class="string">&#x27;0&#x27;</span>||rev2.charAt(j)&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        //判断是否全是0,或者没有.或者空串</span><br><span class="line">        //判断revision修订号</span><br><span class="line">        int i1 = start1==-1?0:Integer.parseInt(rev1.substring(start1, end1==-1?rev1.length():end1));</span><br><span class="line">        int i2 = start2==-1?0:Integer.parseInt(rev2.substring(start2, end2==-1?rev2.length():end2));</span><br><span class="line">        <span class="keyword">if</span>(i1&gt;i2)&#123;</span><br><span class="line">            <span class="built_in">return</span> 1;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i1&lt;i2)&#123;</span><br><span class="line">            <span class="built_in">return</span> -1;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            //递归</span><br><span class="line">            <span class="keyword">if</span>((end1==-1&amp;&amp;end2==-1)||(end1+1==rev1.length()&amp;&amp;end2+1==rev2.length()))&#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(end1==-1)&#123;</span><br><span class="line">               <span class="built_in">return</span> compareVersion(<span class="string">&quot;0&quot;</span>, rev2.substring(end2+1));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(end2==-1)&#123;</span><br><span class="line">                <span class="built_in">return</span> compareVersion(rev1.substring(end1+1), <span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">return</span> compareVersion(rev1.substring(end1+1), rev2.substring(end2+1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//数字直接算就好，官方答案</span><br><span class="line">    public int compareVersion(String version1, String version2) &#123;</span><br><span class="line">        int left=0,right=0;</span><br><span class="line">        int len1 = version1.length();</span><br><span class="line">        int len2 = version2.length();</span><br><span class="line">        int i=0,j=0;</span><br><span class="line">        char a,b;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len1||j&lt;len2)&#123;</span><br><span class="line">            left=0;right=0;</span><br><span class="line">            // a=version1.charAt(i);</span><br><span class="line">            // b=version2.charAt(j);</span><br><span class="line">            <span class="keyword">while</span>(i&lt;len1)&#123;</span><br><span class="line">                a=version1.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(a==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                left=left*10+(a-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                //System.out.format(<span class="string">&quot;len1:%d %d\n&quot;</span>,i,left);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;len2)&#123;</span><br><span class="line">                b=version2.charAt(j);</span><br><span class="line">                <span class="keyword">if</span>(b==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                right=right*10+(b-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                //System.out.format(<span class="string">&quot;len2:%d %d\n&quot;</span>,j,right);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">            //System.out.format(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">            //System.out.format(<span class="string">&quot;%d %d\n&quot;</span>,left,right);</span><br><span class="line">            <span class="keyword">if</span>(left&lt;right)</span><br><span class="line">                <span class="built_in">return</span> -1;</span><br><span class="line">            <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">                <span class="built_in">return</span> 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="题目三：有效的括号"><a href="#题目三：有效的括号" class="headerlink" title="题目三：有效的括号"></a>题目三：<a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h2><p>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  * @Description:栈</span><br><span class="line">  * @ParamType:null</span><br><span class="line">  * @Param: null</span><br><span class="line">  * @<span class="built_in">return</span>: null </span><br><span class="line">  * @Author: panpan</span><br><span class="line">  * @Date:15/3/2023</span><br><span class="line">  */</span><br><span class="line">  public boolean isValid(String s) &#123;</span><br><span class="line">      Stack&lt;Character&gt; now = new Stack&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span>(int i=0;i&lt;s.length();i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="string">&#x27;(&#x27;</span>==s.charAt(i)||<span class="string">&#x27;&#123;&#x27;</span>==s.charAt(i)||<span class="string">&#x27;[&#x27;</span>==s.charAt(i))&#123;</span><br><span class="line">              now.push(s.charAt(i));</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(now.size()==0)&#123;</span><br><span class="line">              <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;)&#x27;</span>==s.charAt(i))&#123;</span><br><span class="line">              <span class="keyword">if</span>(now.pop()!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;&#125;&#x27;</span>==s.charAt(i))&#123;</span><br><span class="line">              <span class="keyword">if</span>(now.pop()!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;]&#x27;</span>==s.charAt(i))&#123;</span><br><span class="line">              <span class="keyword">if</span>(now.pop()!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> now.size()==0?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //官方答案 和栈差不多，waitIn为栈顶指针，不懂为啥快很多</span><br><span class="line">    public boolean isValid(String s) &#123;</span><br><span class="line">      /*</span><br><span class="line">      * 分析得出结论这组括号肯定都是双数也就是%2等于0，还有就是前括号出现对应的后括号后必须是最近的一个前括号相对应不然就是错误格式</span><br><span class="line">      * */</span><br><span class="line">      int length = s.length();</span><br><span class="line">      <span class="keyword">if</span>(length &lt;=1 ||(length % 2) != 0)&#123;</span><br><span class="line">          <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      int i = 0;</span><br><span class="line">      char[] chars = new char[s.length()];</span><br><span class="line">      int waitIn = 0;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; length; i++)&#123;</span><br><span class="line">          char c = s.charAt(i);</span><br><span class="line">          <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">              chars[waitIn] = c;</span><br><span class="line">              waitIn++;</span><br><span class="line">              <span class="built_in">continue</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(waitIn==0) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">              <span class="keyword">if</span> (chars[waitIn-1] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; c == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chars[waitIn-1] == <span class="string">&#x27;[&#x27;</span> &amp;&amp; c == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chars[waitIn-1] == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c == <span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              waitIn--;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(waitIn != 0)&#123;</span><br><span class="line">          <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="题目四-环形链表"><a href="#题目四-环形链表" class="headerlink" title="题目四: 环形链表"></a>题目四: <a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">   * @Description:hashset</span><br><span class="line">   * @ParamType:null</span><br><span class="line">   * @Param: null</span><br><span class="line">   * @<span class="built_in">return</span>: null </span><br><span class="line">   * @Author: panpan</span><br><span class="line">   * @Date:15/3/2023</span><br><span class="line">   */</span><br><span class="line">   public boolean hasCycle(ListNode head) &#123;</span><br><span class="line">       HashSet&lt;ListNode&gt; listNodes = new HashSet&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span> (head!=null)&#123;</span><br><span class="line">           <span class="keyword">if</span>(!listNodes.add(head))&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(head.next==null)&#123;</span><br><span class="line">               <span class="built_in">break</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               head=head.next;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   //官方答案快慢指针，有环时，快指针一定能追上慢指针,感觉时间不是n。无环时，时间为n,空间为2，慢指针速度为1,避免环时访问不到某些节点导致时间复杂</span><br><span class="line">  public boolean hasCycle(ListNode head) &#123;</span><br><span class="line">       <span class="keyword">if</span>(head == null || head.next == null)<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       ListNode slow = head;</span><br><span class="line">       ListNode fast = head.next;</span><br><span class="line">   //    // 方式一</span><br><span class="line">   //    <span class="keyword">while</span>(slow != fast)</span><br><span class="line">   //    &#123;</span><br><span class="line">   //        slow = slow.next;</span><br><span class="line">   //        <span class="keyword">if</span>(fast.next != null)</span><br><span class="line">   //        fast = fast.next.next;</span><br><span class="line">   //      <span class="keyword">else</span></span><br><span class="line">   //        fast = fast.next;</span><br><span class="line"></span><br><span class="line">   //        <span class="keyword">if</span>(fast == null)<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">   //    &#125;<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       //方式二</span><br><span class="line">       <span class="keyword">while</span>(fast != null &amp;&amp; fast.next != null)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(slow == fast)<span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">           slow = slow.next;</span><br><span class="line">           fast = fast.next.next;</span><br><span class="line">           </span><br><span class="line">       &#125;<span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="题目5：-验证二叉搜索树-https-leetcode-cn-problems-validate-binary-search-tree"><a href="#题目5：-验证二叉搜索树-https-leetcode-cn-problems-validate-binary-search-tree" class="headerlink" title="题目5： [验证二叉搜索树]{https://leetcode.cn/problems/validate-binary-search-tree/}"></a>题目5： [验证二叉搜索树]{<a href="https://leetcode.cn/problems/validate-binary-search-tree/%7D">https://leetcode.cn/problems/validate-binary-search-tree/}</a></h2><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">     * @Description:递归函数</span><br><span class="line">     * @paramType:[TreeNode]</span><br><span class="line">     * @Param:[root]</span><br><span class="line">     * @<span class="built_in">return</span>:boolean</span><br><span class="line">     * @Author:panpan</span><br><span class="line">     * @Date:15/3/2023</span><br><span class="line">     */</span><br><span class="line">    public boolean isValidBST(TreeNode root) &#123;</span><br><span class="line">        <span class="built_in">return</span> nodeLegal(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean nodeLegal(TreeNode node,long min,long max)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==null)&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.val&gt;=max||node.val&lt;=min) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> nodeLegal(node.left, min, node.val)&amp;&amp;nodeLegal(node.right, node.val, max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">     * @Description:中序遍历</span><br><span class="line">     * @paramType:[TreeNode]</span><br><span class="line">     * @Param:[root]</span><br><span class="line">     * @<span class="built_in">return</span>:boolean</span><br><span class="line">     * @Author:panpan</span><br><span class="line">     * @Date:15/3/2023</span><br><span class="line">     */</span><br><span class="line">    public boolean isValidBSTMid(TreeNode root) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; treeNodes = new LinkedList&lt;&gt;();</span><br><span class="line">        long min =Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (!treeNodes.isEmpty()||root!=null)&#123;</span><br><span class="line">            <span class="keyword">while</span> (root!=null)&#123;</span><br><span class="line">                treeNodes.add(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = treeNodes.pop();</span><br><span class="line">            <span class="keyword">if</span>(root.val&lt;=min)&#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            min=root.val;// 最小值也就是上一个节点</span><br><span class="line">            root=root.right;// 为null则不进入内循环，直接pop出他的根节点，本身是左节点-&gt;pop根节点-&gt;right右节点</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>git and ssh</title>
    <url>/2023/03/07/gitssh/</url>
    <content><![CDATA[<h1 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span> </span><br></pre></td></tr></table></figure>
<h1 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email` <span class="string">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="git生成公钥"><a href="#git生成公钥" class="headerlink" title="git生成公钥"></a>git生成公钥</h1><p>会生成在当前目录，git bash到用户的.ssh文件夹，可命名文件名，可设置打开文件的密码.默认电脑一个公钥私钥，一个公钥只能被使用一次，建议公钥绑定github账号而非github具体的仓库，部署多个<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys">点击这里</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&#x27;邮箱地址&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="查看git的用户名和邮箱"><a href="#查看git的用户名和邮箱" class="headerlink" title="查看git的用户名和邮箱"></a>查看git的用户名和邮箱</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<h1 id="查看git的公钥"><a href="#查看git的公钥" class="headerlink" title="查看git的公钥"></a>查看git的公钥</h1><p>存储就在用户目录下的.ssh文件夹里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>1.先在账户上创建repository。保证用户有权限，SSH或者http登录，推荐SSH绑定账户信息，http登录仓库，方便权限管理</p>
<p>2.a 没有.git文件的，先在本地工程一级目录下初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# HexoBogForPanpan&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:pansansui/HexoBogForPanpan.git //这是在你电脑上生成了一个origin的远程仓库，连接地址是后面的，常用命令有git remote //列出远程仓库名</span><br><span class="line">git remote show [远程仓库名] //该仓库链接的详细信息</span><br><span class="line">git remote rename old-name new-name //换名</span><br><span class="line">git push -u origin main //发布到远程仓库</span><br></pre></td></tr></table></figure>
<p>2.b 有.git文件的:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:pansansui/HexoBogForPanpan.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h1 id="git-常用命令集"><a href="#git-常用命令集" class="headerlink" title="git 常用命令集"></a>git 常用命令集</h1><p>git 常用操作练习<a href="https://learngitbranching.js.org/?locale=zh_CN">点击这里</a>，该网站常用命令show solution，reset，levels<br>删除当前项目的git关联<br><code>find . -name &quot;.git&quot; | xargs rm -rf</code><br>初始化<br><code>git init</code><br>查看追踪文件状态<br><code>git status</code><br>取消文件追踪<br><code>git reset HEAD [文件路径]</code><br>添加文件追踪<br><code>git add [文件]</code><br>提交<br> <code>git commit -m [本次更新的消息提示]</code><br>创建切换分支<br><code>git branch bugFix;git checkout bugFix</code><br>或者<br><code>git checkout -b bugFix</code><br>合并当前分支与目标<br><code>git merge [目标分支]</code><br><img src=/images/merge.png width="30%" alt="未找到merge流程图片" ><br><code>git rebase [目标分支]</code></p>
<p>对最近一次提交的信息修改<br><code>git commit --amend</code></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello pansansui</title>
    <url>/2021/06/22/hello-world/</url>
    <content><![CDATA[<p>Welcome ! This is my first blog for review my Java knowledge . Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a><br><br><span id="more"></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
